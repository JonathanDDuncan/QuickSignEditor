
Expression
  = Sign

Colors = SignStylingPrefix ColorPrefix color:Color
	{ return  {fore: color.fore,back: color.back};  }

SignStylingPrefix
	= "-"

ColorPrefix = "D"

Color =  PairPrefix foregroundcolor: (RGB / ColorText) "," backgroundcolor: (RGB / ColorText) PairSuffix
	{ return  {fore: foregroundcolor, back: backgroundcolor};  }

RGB = [0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]{return text()}
ColorText =[a-wyzA-Z]+ {return text()}
ColorPair = PairPrefix  PairSuffix

PairPrefix = "_"
PairSuffix  = "_"

Document = SignSpacer *

SignSpacer =
Sign Space

Sign =  sort:Sorting ?  sign:UnSortedSign
	{ return  { sorting: sort, sign: sign } }
UnSortedSign = prefix:SignPrefix symbols:SymbolCoordinate * colors:Colors ?
	{ return  { l: prefix.lane, c: prefix.signcoordinate, colors: colors, symbols: symbols } }
SymbolCoordinate = symb:Symbol coord:Coordinate
	{ return { k: symb, c: coord

    } }

Sorting = "A" symbols: Symbol *
	{ return  symbols  }


Symbol =
	result: "S"[123][0-9a-f][0-9a-f][0-5][0-9a-f]
   {return text()}

SignPrefix = lane:[BLMR] signcoordinate: Coordinate ?
	{return { lane: lane, signcoordinate:signcoordinate}}


Coordinate = x1:ThreeInts CoordinateSpacer y1:ThreeInts
  {

      return { x: x1, y : y1 };
    }

ThreeInts "threeints"
	 = [0-9][0-9][0-9]  { return parseInt(text(), 10); }

Integer "integer"
  = [0-9]+ { return parseInt(text(), 10); }

CoordinateSpacer "coordinatespacer"
  = [Xx]

Space = " " *

Whitespace "whitespace"
  = [ \t\n\r]*
