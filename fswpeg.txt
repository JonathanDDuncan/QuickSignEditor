
Expression
  = Sign

SignColors = SignStylingPrefix ColorPrefix color:Color
	{ return  {fore: color.fore,back: color.back};  }

SymbolsColors = SymbolStylingPrefix  colors: SymbolColors *
	{ return  {symbolcolors: colors};  }

SymbolColors = ColorPrefix index:SymbolIndex color:Color
	{ return  {index: index, fore: color.fore,back: color.back};  }

SymbolIndex = digits: (digit digit)
		 { return parseInt(digits.join(""), 10); }

SignStylingPrefix
	= "-"

SymbolStylingPrefix
	= "--"

ColorPrefix = "D"

Color =  PairPrefix foregroundcolor: (RGB / ColorText) "," backgroundcolor: (RGB / ColorText) PairSuffix
	{ return  {fore: foregroundcolor, back: backgroundcolor};  }

RGB = hexa hexa hexa hexa hexa hexa {return text()}
ColorText =[a-wyzA-Z]+ {return text()}
ColorPair = PairPrefix  PairSuffix

PairPrefix = "_"
PairSuffix  = "_"

Document = SignSpacer *

SignSpacer =
Sign Space

Sign =  sort:Sorting ?  sign:UnSortedSign
	{ return  { sorting: sort, sign: sign } }
UnSortedSign = prefix:SignPrefix symbols:SymbolCoordinate * stylin:Styling
	{ return  { l: prefix.lane, c: prefix.signcoordinate, colors: stylin.colors,  symbolscolors: stylin.symbolscolors, symbols: symbols } }

Styling = colors:SignColors ? symbolscolors:SymbolsColors ?
	{ return { colors : colors, symbolscolors : symbolscolors}}

SymbolCoordinate = symb:Symbol coord:Coordinate
	{ return { k: symb, c: coord

    } }

Sorting = "A" symbols: Symbol *
	{ return  symbols  }


Symbol =
	result: "S"[123]hexa hexa[0-5]hexa
   {return text()}

SignPrefix = lane:[BLMR] signcoordinate: Coordinate ?
	{return { lane: lane, signcoordinate:signcoordinate}}


Coordinate = x1:ThreeInts CoordinateSpacer y1:ThreeInts
  {

      return { x: x1, y : y1 };
    }

ThreeInts "threeints"
	 = digit digit digit  { return parseInt(text(), 10); }

Integer "integer"
  = digit+ { return parseInt(text(), 10); }

CoordinateSpacer "coordinatespacer"
  = [Xx]

digit = [0-9]
hexa = [0-9a-f]

Space = " " *

Whitespace "whitespace"
  = [ \t\n\r]*
